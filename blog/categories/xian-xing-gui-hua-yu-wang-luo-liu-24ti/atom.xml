<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 线性规划与网络流24题 | 伏笔]]></title>
  <link href="http://cpsa3.github.io/blog/categories/xian-xing-gui-hua-yu-wang-luo-liu-24ti/atom.xml" rel="self"/>
  <link href="http://cpsa3.github.io/"/>
  <updated>2015-07-19T19:44:19+08:00</updated>
  <id>http://cpsa3.github.io/</id>
  <author>
    <name><![CDATA[cpsa3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[星际转移问题(分层图网络流)]]></title>
    <link href="http://cpsa3.github.io/blog/2014/12/07/xing-ji-zhuan-yi-wen-ti-fen-ceng-tu-wang-luo-liu/"/>
    <updated>2014-12-07T19:28:30+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/12/07/xing-ji-zhuan-yi-wen-ti-fen-ceng-tu-wang-luo-liu</id>
    <content type="html"><![CDATA[<h3>星际转移问题</h3>

<h4>问题描述：</h4>

<p>由于人类对自然资源的消耗，人们意识到大约在2300年之后，地球就不能再居住了。于是在月球上建立了新的绿地，以便在需要时移民。令人意想不到的是，2177年冬由于未知的原因，地球环境发生了连锁崩溃，人类必须在最短的时间内迁往月球。现有n个太空站位于地球与月球之间，且有m艘公共交通太空船在其间来回穿梭。每个太空站可容纳无限多的人，而每艘太空船i 只可容纳H[i]个人。每艘太空船将周期性地停靠一系列的太空站，例如：(1，3，4)表示该太空船将周期性地停靠太空站134134134…。每一艘太空船从一个太空站驶往任一太空站耗时均为1。人们只能在太空船停靠太空站(或月球、地球)时上、下船。初始时所有人全在地球上，太空船全在初始站。试设计一个算法，找出让所有人尽快地全部转移到月球上的运输方案。</p>

<h4>编程任务：</h4>

<p>对于给定的太空船的信息，找到让所有人尽快地全部转移到月球上的运输方案。</p>

<h4>数据输入：</h4>

<p>由文件input.txt提供输入数据。文件第1行有3个正整数n（太空站个数），m（太空船个数）和k（需要运送的地球上的人的个数）。其中1&lt;=m&lt;=13,1&lt;=n&lt;=20,1&lt;=k&lt;=50。接下来的m行给出太空船的信息。第i+1行说明太空船pi。第1个数表示pi可容纳的人数Hpi；第2个数表示pi一个周期停靠的太空站个数r，1&lt;=r&lt;=n+2；随后r个数是停靠的太空站的编号(Si1,Si2,…,Sir)，地球用0表示，月球用-1表示。时刻0时，所有太空船都在初始站，然后开始运行。在时刻1，2，3…等正点时刻各艘太空船停靠相应的太空站。人只有在0,1,2…等正点时刻才能上下太空船。</p>

<h4>结果输出：</h4>

<p>程序运行结束时，将全部人员安全转移所需的时间输出到文件output.txt中。如果问题无解，则输出0。</p>

<h4>输入文件示例：</h4>

<p>2 2 1</p>

<p>1 3 0 1 2</p>

<p>1 3 1 2 –1</p>

<h4>输出文件示例：</h4>

<p>5</p>

<hr />

<h3>解决方案：</h3>

<h4>1.问题分析：</h4>

<p>分层图网络流问题，枚举答案，构造网络流判定。</p>

<h4>2.建模方法：</h4>

<p>首先判断从地球到月球是否存在一条路线，如果不存在那么无解，否则把每个太空站按照每天拆分成d个点，&lt;i,d>表示第i个站第d天。建立附加源S汇T，顺序枚举答案Day。</p>

<p>整体思路：枚举天数，每次添加一些新的点和边继续增广。然后判断。</p>

<p>N：太空站数量；</p>

<p>M：太空船数量；</p>

<p>K：需要传送的地球上人数</p>

<p>建图：</p>

<p>（1）、起始时S到(0,0)连接一天容量为K的有向边。如果当前枚举到第Day天。</p>

<p>（2）、从(-1,Day)到T连接一条容量为INF的有向边。</p>

<p>（3）、对于第i个太空船，设第Day-1天在a处，第Day天在b处，从(a,Day-1)到(b,Day)连接一条容量为该太空船容量H[i]的有向边。</p>

<p>（4）、对于第i个太空站，从(i,Day-1)到(i,Day)连接一条容量为INF的有向边。</p>

<p>（5）、求当前网络最大流，统计当前day之前的所以最大流量之和如果等于地球上人数K，停止枚举，当前Day值就是答案。</p>

<p>注：0：地球; 1：月球</p>

<h4>3.建模分析：</h4>

<p>建图注释：</p>

<p>（1）、表示K个人起始的时候 ( 即第0天 ) 都在地球上。这样限制了转移人数上限。</p>

<p>（2）、表示第day天的时候可以有人登入月球。</p>

<p>（3）、表示每个太空船对人的转移过程。</p>

<p>（4）、表示第i个太空船上的人可以选择留到下一天在转移出去。</p>

<p>（5）、表示前day天所能传送的最大人数如果等于K则说明已经完成任务。停止枚举。</p>

<p>Ps、我们把网络优化问题转化为枚举答案+可行性判定问题。</p>

<p>（1）、枚举天数，按天数把图分层，因为乘船每坐一站天数都要增加一，把太空船航线抽象成图中的一条边，跨图的两层。</p>

<p>（2）、由于太空船容量有限，边上也要加上容量限制。</p>

<p>（3）、除了坐船以外，人还可以在某个空间站等待下一班太空船的到来，所以每个点要与下一层同一点连接一条容量为无穷的边。</p>

<p>（4）、这样在层限制的图上求出的网络最大流并于之前的最大流量之和累加就是在当前天数以内能够从地面到月球的最多的人数，该人数随天数递增不递减，存在单调性。所以可以枚举
答案或二分答案，用网络流判定。</p>

<p>（5）、网络流判定问题更适合枚举答案，而不是二分，因为新增一些点和边只需要在原有的基础上增广，不必重新求网络流。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[运输问题 (费用流问题)]]></title>
    <link href="http://cpsa3.github.io/blog/2014/12/07/yun-shu-wen-ti-fei-yong-liu-wen-ti/"/>
    <updated>2014-12-07T19:07:25+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/12/07/yun-shu-wen-ti-fei-yong-liu-wen-ti</id>
    <content type="html"><![CDATA[<h3>运输问题</h3>

<h4>问题描述：</h4>

<p>W公司有m个仓库和n个零售商店。第i个仓库有ai个单位的货物；第j个零售商店需要bj个单位的货物。货物供需平衡，即a1 + a2 + &hellip; + am-1 + am = b1 + b2 + &hellip; + bn-1 + bn。从第i个仓库运送每单位货物到第j个零售商店的费用为cij。试设计一个将仓库中所有货物运送到零售商店的运输方案，使总运输费用最少。</p>

<h4>编程任务：</h4>

<p>对于给定的m个仓库和n个零售商店间运送货物的费用，计算最优运输方案和最差运输方案。</p>

<h4>数据输入：</h4>

<p>由文件input.txt提供输入数据。文件的第1行有2个正整数m和n，分别表示仓库数和零售商店数。接下来的一行中有m个正整数ia，1≤i≤m，表示第i个仓库有ai个单位的货物。再接下来的一行中有n个正整数bj，1≤j≤n，表示第j个零售商店需要bj个单位的货物。接下来的m行，每行有n个整数，表示从第i个仓库运送每单位货物到第j个零售商店的费用cij。</p>

<h4>结果输出：</h4>

<p>程序运行结束时，将计算出的最少运输费用和最多运输费用输出到文件output.txt中。</p>

<h4>输入文件示例：</h4>

<p>2 3</p>

<p>220 280</p>

<p>170 120 210</p>

<p>77 39 105</p>

<p>150 186 122</p>

<h4>输出文件示例：</h4>

<p>48500</p>

<p>69140</p>

<hr />

<h3>解决方案：</h3>

<h4>1.问题分析：</h4>

<p>供求关系，用费用流解决。</p>

<h4>2.建模方法：</h4>

<p>把M个仓库看成二分图X集合的点，把N个商店看成二分图Y集合的点。添加源汇点S,T。</p>

<blockquote><ul>
<li>S向所有仓库i连一条容量为仓库中货物数量ai，费用为0的有向边。</li>
<li>每个商店j向T连一条容量为该商店需要货物数bj，费用为0的有向边。</li>
<li>每个仓库i向每个商店j连一条容量为INF，费用为cij的边。</li>
</ul>
</blockquote>

<p>求最小费用最大流，最小费用流值就是最少运费；
求最大费用最大流，最大费用流值就是最多运费；</p>

<h4>3.建模分析：</h4>

<p>把每个仓库想象成一个中转站，由源点运来ai单位货物，运费为0，每个商店也为一个中转站，运向目标汇点bi单位货物。每个仓库和零售商店之间有一条道路，容量为无穷大，费用为单位运费cij。求从源点到汇点的费用流，就是运费。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分配问题 (二分图最佳匹配)]]></title>
    <link href="http://cpsa3.github.io/blog/2014/12/07/fen-pei-wen-ti-er-fen-tu-zui-jia-pi-pei/"/>
    <updated>2014-12-07T18:55:48+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/12/07/fen-pei-wen-ti-er-fen-tu-zui-jia-pi-pei</id>
    <content type="html"><![CDATA[<h3>分配问题</h3>

<h4>问题描述：</h4>

<p>有n件工作要分配给n个人做。第i个人做第j件工作产生的效益为cij。试设计一个将n件工作分配给n个人做的分配方案，使产生的总效益最大。</p>

<h4>编程任务：</h4>

<p>对于给定的n件工作和n个人，计算最优分配方案和最差分配方案。</p>

<h4>数据输入：</h4>

<p>由文件input.txt提供输入数据。文件的第1行有1个正整数n，表示有n件工作要分配给n个人做。接下来的n行中，每行有n个整数cij，1≤i≤n，1≤j≤n，表示第i个人做第j件工作产生的效益为cij。</p>

<h4>结果输出：</h4>

<p>程序运行结束时，将计算出的最小总效益和最大总效益输出到文件output.txt中。</p>

<h4>输入文件示例：</h4>

<p>5</p>

<p>2 2 2 1 2</p>

<p>2 3 1 2 4</p>

<p>2 0 1 1 1</p>

<p>2 3 4 3 3</p>

<p>3 2 1 2 1</p>

<h4>输出文件示例：</h4>

<p>5</p>

<p>14</p>

<hr />

<h3>解决方案：</h3>

<h4>1.问题分析：</h4>

<p>二分图最佳匹配问题，可以费用流解决 (或KM算法)。</p>

<h4>2.建模方法：</h4>

<p>把所有人看做二分图中顶点Xi，所有工作看做二分图中顶点Yi，建立附加源S汇T。</p>

<blockquote><ul>
<li>从S向每个Xi连一条容量为1，费用为0的有向边。</li>
<li>从每个Yi向T连一条容量为1，费用为0的有向边。</li>
<li>从每个Xi向每个Yj连接一条容量为INF (或1)，费用为Cij的有向边。</li>
</ul>
</blockquote>

<p>求最小费用最大流，最小费用流值就是最少运费，求最大费用最大流，最大费用流值就是最多运费。</p>

<h4>3.建模分析：</h4>

<p>二分图最佳匹配建模方法为费用流模型。</p>

<p>建图注释：</p>

<blockquote><ul>
<li>限制每个人能匹配的次数，因为每个人最多只能做一件。</li>
<li>限制每件工作的匹配次数，因为每件工作只需要一个人来做。</li>
<li>表示第Xi个人做第Yj间工作需要的花费。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[负载平衡问题（供求平衡）]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/26/fu-zai-ping-heng-wen-ti-(gong-qiu-ping-heng-)/"/>
    <updated>2014-11-26T17:48:57+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/26/fu-zai-ping-heng-wen-ti-(gong-qiu-ping-heng-)</id>
    <content type="html"><![CDATA[<h3>负载平衡问题</h3>

<h4>问题描述：</h4>

<p>G公司有n个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使n个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。</p>

<h4>编程任务：</h4>

<p>对于给定的n个环形排列的仓库的库存量， 编程计算使n 个仓库的库存数量相同的最少搬运量。</p>

<h4>数据输入：</h4>

<p>由文件 input.txt 提供输入数据。文件的第 1 行中有 1 个正整数 n（n&lt;=100） ，表示有 n个仓库。第2行中有 n个正整数，表示n个仓库的库存量。</p>

<h4>数据输入：</h4>

<p>由文件 input.txt 提供输入数据。文件的第 1 行中有 1 个正整数 n（n&lt;=100） ，表示有 n个仓库。第2行中有 n个正整数，表示n个仓库的库存量。</p>

<h4>结果输出:</h4>

<p>程序运行结束时，将计算出的最少搬运量输出到文件output.txt中。</p>

<h4>输入文件示例：</h4>

<p>5</p>

<p>17 9 14 16 4</p>

<h4>输出文件示例：</h4>

<p>11</p>

<hr />

<h3>解决方案：</h3>

<h4>1.问题分析：</h4>

<p>转化为供求平衡问题，用最小费用最大流解决。</p>

<h4>2.建模方法：</h4>

<p>首先求出所有仓库存货量平均值，设第i个仓库的盈余量为A[i]，A[i] = 第i个仓库原有存货量 - 平均存货量。建立二分图，把每个仓库抽象为两 个节点Xi和Yi。增设附加源S汇T。</p>

<blockquote><ul>
<li>如果A[i] > 0，从S向Xi连一条容量为A[i]，费用为0的有向边。</li>
<li>如果A[i] &lt; 0，从Yi向T连一条容量为 - A[i]，费用为0的有向边。</li>
<li>每个Xi向两个相邻顶点j，从Xi到Yj连接一条容量为无穷大，费用为1的有向边。</li>
<li>每个Xi向两个相邻顶点j，从Xi到Xj连接一条容量为无穷大，费用为1的有向边。</li>
</ul>
</blockquote>

<p>求最小费用最大流，最小费用流值就是最少搬运量。</p>

<h4>3.建模分析：</h4>

<blockquote><ul>
<li>计算出每个仓库的盈余后，可以把问题转化为供求问题。</li>
<li>建立供求网络，把二分图X集合中所有节点看做供应节点，Y集合所有节点看做需求节点。</li>
<li>在能一次搬运满足供需的Xi和Yj之间连接一条费用为1的有向边，表示搬运一个单位货物费用为1。   &ndash; 建图中的第(3)步</li>
<li>另外还要在Xi与相邻的Xj之间连接边，表示货物可以暂时搬运过去，不立即满足需求，费用也为1。 &ndash; 建图中的第(4)步</li>
<li>最大流满足了所有的盈余和亏损供求平衡，最小费用就是最少搬运量。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
</feed>
