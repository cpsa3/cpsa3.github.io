---
layout: post
title: "JS Tips"
date: 2015-07-15 23:05:59 +0800
comments: true
categories: ['前端']
---
1.undefined, null, 0, false, NaN，''（空字符串）都为假

2.从一个数组中获取随机项
```javascript
var items = [1, 2, 3, 'xx', 'zz', 23, 32, 123];  
var randomItem = items[Math.floor(Math.random() * items.length)];
```

3.从一个特定范围内获取随机数
```javascript
var x = Math.floor(Math.random() * (max - min + 1)) + min;  
```

4.生成一个值从0到设定最大值的数字数组
```javascript
var numbersArray = [], max = 100;  
for(var i = 1; numbersArray.push(i++) < max;);    
```

5.生成随机字母数字字符集
【解释：Math.random()生成0到1之间的随机数，number.toString(36)是将这个数字转换成36进制（0-9，a-z）,最后substr去掉前面的"0."字符串】
```javascript
function generateRandomAlphaNum(len) {  
    var rdmString = "";
    for( ; rdmString.length < len; rdmString  += Math.random().toString(36).substr(2));
    return  rdmString.substr(0, len); 
}
```

6.打乱一个数字数组
```javascript
var numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411]; 
numbers.sort(function(){ return Math.random() - 0.5; });  
```

7.String的trim函数(在最新的javascript引擎中已经有了原生的trim函数实现)
```javascript
String.prototype.trim = function(){return this.replace(/^\s+|\s+$/g, "");}; 
```

8.创建立即调用函数表达式（IIFE）。
```javascript
// lambda函数调用法
(function() {
    // some private code that will be executed automatically
}());
// 模块模式
(function() {
    // some private code that will be executed automatically
})();
(function(a, b) {
    var result = a + b;
    return result;
})(10, 20);
```

9.将arguments对象转换成一个数组
```javascript
var argArray = Array.prototype.slice.call(arguments);  
```

10.验证参数是否是数值类型（isNaN函数用于检查参数是否是非数字值；parseFloat函数解析一个字符串，并返回一个浮点数；isFinite函数用于检查参数是否为无穷大）
```javascript
function isNumber(n){  
    return !isNaN(parseFloat(n)) && isFinite(n); 
};
```

11.在数字数组中获取最大或最小值
```javascript
var  numbers = [5, 458 , 120 , -215 , 228 , 400 , 122205, -85411];  
var maxInNumbers = Math.max.apply(Math, numbers);  
var minInNumbers = Math.min.apply(Math, numbers);  
```

12.清空一个数组
```javascript
var myArray = [12, 222, 1000];  
myArray.length = 0;  // myArray will be equal to [].  
```

13.不要使用delete删除数组中的项（使用splice而不是delete从数组中删除某个项，使用delete将要删除项替换为undefined而不是从数组中将它真正删除。delete方法应该被用来删除一个对象的某个属性。）
```javascript
var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];  
items.length; // return 11  
delete items[3]; // return true  
items.length; // return 11  
/* items will be equal to [12, 548, "a", undefined × 1, 5478, "foo", 8852, undefined × 1, "Doe", 2154, 119] */
```

```javascript
var items = [12, 548 ,'a' , 2 , 5478 , 'foo' , 8852, , 'Doe' ,2154 , 119 ];  
items.length; // return 11  
items.splice(3,1) ;  
items.length; // return 10  
/* items will be equal to [12, 548, "a", 5478, "foo", 8852, undefined × 1, "Doe", 2154, 119] */
```

14.使用length截断一个数组
```javascript
var myArray = [12 , 222 , 1000 , 124 , 98 , 10 ];  
myArray.length = 4; // myArray will be equal to [12 , 222 , 1000 , 124]  
```

15.使用逻辑AND/OR做条件判断
```javascript
var foo = 10;  
foo == 10 && doSomething(); // is the same thing as if (foo == 10) doSomething();  
foo == 5 || doSomething(); // is the same thing as if (foo != 5) doSomething();   
```

16.使用map方法来遍历一个数组里的项
```javascript
var squares = [1,2,3,4].map(function (val) {  
    return val * val;  
});
// squares will be equal to [1, 4, 9, 16]
```

17.四舍五入一个数字，保留N位小数（注意：toFixed方法返回的是一个字符串而不是数值）
```javascript
var num =2.443242342;  
num = num.toFixed(4);  // num will be equal to 2.4432 
```

18.浮点数问题（所有的javascript数字在内部都是以64位二进制表示的浮点数，符合IEEE 754标准。可以使用toFixed()和toPrecision()方法解决这个问题）
```javascript
0.1 + 0.2 === 0.3 // is false  
9007199254740992 + 1 // is equal to 9007199254740992  
9007199254740992 + 2 // is equal to 9007199254740994  
```

20.基于JSON的序列化和反序列化
```javascript
var person = {name :'Saad', age : 26, department : {ID : 15, name : "R&D"} };  
var stringFromPerson = JSON.stringify(person);  
/* stringFromPerson is equal to "{"name":"Saad","age":26,"department":{"ID":15,"name":"R&D"}}" */
var personFromString = JSON.parse(stringFromPerson);  
/* personFromString is equal to person object */
```

21.一个HTML转义函数
```javascript
function escapeHTML(text) {  
    var replacements= {"<": "&lt;", ">": "&gt;","&": "&amp;", "\"": "&quot;"};                      
    return text.replace(/[<>&"]/g, function(character) {  
        return replacements[character];  
    });
};
```