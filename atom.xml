<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[伏笔]]></title>
  <link href="http://cpsa3.github.io/atom.xml" rel="self"/>
  <link href="http://cpsa3.github.io/"/>
  <updated>2014-12-07T18:09:49+08:00</updated>
  <id>http://cpsa3.github.io/</id>
  <author>
    <name><![CDATA[cpsa3]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[位运算实现整数的加减乘除]]></title>
    <link href="http://cpsa3.github.io/blog/2014/12/07/wei-yun-suan-shi-xian-zheng-shu-de-jia-jian-cheng-chu/"/>
    <updated>2014-12-07T17:57:53+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/12/07/wei-yun-suan-shi-xian-zheng-shu-de-jia-jian-cheng-chu</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">AddUonRecursive</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="c1">// 非递归加法 </span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">&amp;</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span> <span class="n">j</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">&amp;</span><span class="n">j</span><span class="p">)</span> <span class="n">a</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="n">j</span><span class="p">;</span>
</span><span class='line'>              <span class="k">else</span> <span class="p">{</span> <span class="n">a</span> <span class="o">|=</span> <span class="n">j</span><span class="p">;</span><span class="k">break</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">AddRecursive</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="c1">//递归加法 </span>
</span><span class='line'>  <span class="k">return</span> <span class="n">b</span> <span class="o">?</span> <span class="n">AddRecursive</span><span class="p">(</span> <span class="n">a</span><span class="o">^</span><span class="n">b</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="o">&amp;</span><span class="n">b</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">1</span> <span class="p">)</span> <span class="o">:</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">GetReverse</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">){</span> <span class="c1">// 取补码</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&amp;&amp;</span><span class="p">((</span><span class="n">a</span><span class="o">&amp;</span><span class="n">i</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">);</span> <span class="n">i</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">)</span> <span class="n">a</span> <span class="o">^=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Minus</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="c1">//减法 </span>
</span><span class='line'>  <span class="c1">//取减数补码 </span>
</span><span class='line'>  <span class="n">b</span> <span class="o">=</span> <span class="n">GetReverse</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span>  <span class="n">AddRecursive</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Multiple</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="c1">//乘法 </span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">,</span><span class="n">a</span><span class="o">&lt;&lt;=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">b</span><span class="o">&amp;</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>          <span class="n">ans</span> <span class="o">=</span> <span class="n">AddRecursive</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="n">a</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">ans</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">Division</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="c1">//除法(正负都可以)</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">IsPositive</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">31</span><span class="p">))</span> <span class="p">{</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GetReverse</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">IsPositive</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">31</span><span class="p">))</span> <span class="p">{</span> <span class="n">b</span> <span class="o">=</span> <span class="n">GetReverse</span><span class="p">(</span><span class="n">b</span><span class="p">);</span> <span class="n">IsPositive</span> <span class="o">^=</span> <span class="mi">1</span><span class="p">;}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">31</span><span class="p">;</span> <span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">a</span><span class="o">&gt;&gt;</span><span class="n">i</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">b</span><span class="p">){</span> <span class="c1">//不能这样比较a &gt;= (b &lt;&lt; i) 会溢出 </span>
</span><span class='line'>          <span class="n">ans</span> <span class="o">=</span> <span class="n">AddUonRecursive</span><span class="p">(</span><span class="n">ans</span><span class="p">,</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>          <span class="n">a</span> <span class="o">=</span> <span class="n">Minus</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">&lt;&lt;</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">IsPositive</span> <span class="o">?</span> <span class="nl">ans</span> <span class="p">:</span> <span class="n">GetReverse</span><span class="p">(</span><span class="n">ans</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  
</span><span class='line'>  <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span><span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;非递归加法：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">AddUonRecursive</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;递归加法：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">AddRecursive</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;减法：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">Minus</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;乘法：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">Multiple</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;除法：%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">Division</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">6 -2</span>
</span><span class='line'><span class="cm">非递归加法：4</span>
</span><span class='line'><span class="cm">递归加法：4</span>
</span><span class='line'><span class="cm">减法：8</span>
</span><span class='line'><span class="cm">乘法：-12</span>
</span><span class='line'><span class="cm">除法：-3                                                                    </span>
</span><span class='line'><span class="cm">*/</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[负载平衡问题（供求平衡）]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/26/fu-zai-ping-heng-wen-ti-(gong-qiu-ping-heng-)/"/>
    <updated>2014-11-26T17:48:57+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/26/fu-zai-ping-heng-wen-ti-(gong-qiu-ping-heng-)</id>
    <content type="html"><![CDATA[<h3>负载平衡问题</h3>

<h4>问题描述：</h4>

<p>G公司有n个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量不等。如何用最少搬运量可以使n个仓库的库存数量相同。搬运货物时，只能在相邻的仓库之间搬运。</p>

<h4>编程任务：</h4>

<p>对于给定的n个环形排列的仓库的库存量， 编程计算使n 个仓库的库存数量相同的最少搬运量。</p>

<h4>数据输入：</h4>

<p>由文件 input.txt 提供输入数据。文件的第 1 行中有 1 个正整数 n（n&lt;=100） ，表示有 n个仓库。第2行中有 n个正整数，表示n个仓库的库存量。</p>

<h4>数据输入：</h4>

<p>由文件 input.txt 提供输入数据。文件的第 1 行中有 1 个正整数 n（n&lt;=100） ，表示有 n个仓库。第2行中有 n个正整数，表示n个仓库的库存量。</p>

<h4>结果输出:</h4>

<p>程序运行结束时，将计算出的最少搬运量输出到文件output.txt中。</p>

<h4>输入文件示例：</h4>

<p>5
17 9 14 16 4</p>

<h4>输出文件示例：</h4>

<p>11</p>

<hr />

<h3>解决方案：</h3>

<h4>1.问题分析：</h4>

<p>转化为供求平衡问题，用最小费用最大流解决。</p>

<h4>2.建模方法：</h4>

<p>首先求出所有仓库存货量平均值，设第i个仓库的盈余量为A[i]，A[i] = 第i个仓库原有存货量 - 平均存货量。建立二分图，把每个仓库抽象为两 个节点Xi和Yi。增设附加源S汇T。</p>

<blockquote><ul>
<li>如果A[i] > 0，从S向Xi连一条容量为A[i]，费用为0的有向边。</li>
<li>如果A[i] &lt; 0，从Yi向T连一条容量为 - A[i]，费用为0的有向边。</li>
<li>每个Xi向两个相邻顶点j，从Xi到Yj连接一条容量为无穷大，费用为1的有向边。</li>
<li>每个Xi向两个相邻顶点j，从Xi到Xj连接一条容量为无穷大，费用为1的有向边。</li>
</ul>
</blockquote>

<p>求最小费用最大流，最小费用流值就是最少搬运量。</p>

<h4>3.建模分析：</h4>

<blockquote><ul>
<li>计算出每个仓库的盈余后，可以把问题转化为供求问题。</li>
<li>建立供求网络，把二分图X集合中所有节点看做供应节点，Y集合所有节点看做需求节点。</li>
<li>在能一次搬运满足供需的Xi和Yj之间连接一条费用为1的有向边，表示搬运一个单位货物费用为1。   &ndash; 建图中的第(3)步</li>
<li>另外还要在Xi与相邻的Xj之间连接边，表示货物可以暂时搬运过去，不立即满足需求，费用也为1。 &ndash; 建图中的第(4)步</li>
<li>最大流满足了所有的盈余和亏损供求平衡，最小费用就是最少搬运量。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[生活不止眼前的苟且]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/18/sheng-huo-bu-zhi-yan-qian-de-gou-qie/"/>
    <updated>2014-11-18T01:25:12+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/18/sheng-huo-bu-zhi-yan-qian-de-gou-qie</id>
    <content type="html"><![CDATA[<blockquote><p>生活不止眼前的苟且</p>

<p>还有诗和远方的田野</p>

<p>你赤手空拳来到</p>

<p>人世间</p>

<p>为找到那片海</p>

<p>不顾一切</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Giihub Page 域名绑定]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/16/giihub-page-yu-ming-bang-ding/"/>
    <updated>2014-11-16T22:34:39+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/16/giihub-page-yu-ming-bang-ding</id>
    <content type="html"><![CDATA[<ul>
<li>在Octopress/source目录下建个无后缀的CNAME文本文件，里面写上域名，如ryvius.me</li>
<li><p>去域名管理网站修改:</p>

<p>CNAME: www.ryvius.me => cpsa3.github.com</p>

<p>A: ryvius.me => 207.97.227.245</p></li>
<li>等待域名解析生效</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About Me]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/15/about-me/"/>
    <updated>2014-11-15T23:36:56+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/15/about-me</id>
    <content type="html"><![CDATA[<p>90后，程序员，宅男
偏爱动漫，但对游戏无感
时而2B，时而文艺</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello world]]></title>
    <link href="http://cpsa3.github.io/blog/2014/11/14/hello-world/"/>
    <updated>2014-11-14T01:05:33+08:00</updated>
    <id>http://cpsa3.github.io/blog/2014/11/14/hello-world</id>
    <content type="html"><![CDATA[<h4>JavaScript</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Hello World&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Python</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requires_authorization</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># A comment</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&#39;hello world&#39;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
